"""This text file tests 100-matrix_mul module"""
>>> matrix_mul = __import__('100-matrix_mul').matrix_mul

# Check for module doc string
>>> m = __import__('100-matrix_mul').__doc__
>>> len(m) > 1
True


# Check for function doc string
>>> len(matrix_mul.__doc__) > 1
True

# Check correct result 1
>>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
[[7, 10], [15, 22]]


# Check correct result 2
>>> matrix_mul([[1, 2]], [[3, 4], [5, 6]])
[[13, 16]]


# Check first arg is a list
>>> matrix_mul("a", [[1, 2], [3, 4]])
Traceback (most recent call last):
...
TypeError: m_a must be a list


# Check second arg is a list
>>> matrix_mul([[1,2], [1,3]], "b")
Traceback (most recent call last):
...
TypeError: m_b must be a list


# Check first arg is a list of lists
>>> matrix_mul(["a", [1,3]], [[1,2], [1,2]])
Traceback (most recent call last):
...
TypeError: m_a must be a list of lists


# Check second arg is a list of lists
>>> matrix_mul([[1,2], [1,3]], ["a", [1,2]])
Traceback (most recent call last):
...
TypeError: m_b must be a list of lists


# Check first arg is not empty
>>> matrix_mul([], [[1,2], [1,2]])
Traceback (most recent call last):
...
ValueError: m_a can't be empty


# Check first arg is not empty
>>> matrix_mul([[]], [[1,2], [1,2]])
Traceback (most recent call last):
...
ValueError: m_a can't be empty


# Check second arg is not empty
>>> matrix_mul([[1,2], [1,2]], [])
Traceback (most recent call last):
...
ValueError: m_b can't be empty


# Check second arg is not empty
>>> matrix_mul([[1,2], [1,2]], [[]])
Traceback (most recent call last):
...
ValueError: m_b can't be empty


# Check first arg is not empty
>>> matrix_mul([[]], [[1,2], [1,2]])
Traceback (most recent call last):
...
ValueError: m_a can't be empty


# Check first arg contains only integers
>>> matrix_mul([[1, 2], ["a", 2]], [[1,2], [1,2]])
Traceback (most recent call last):
...
TypeError: m_a should contain only integers or floats

# Check first arg contains only integers
>>> matrix_mul([[1, 2], ["a", 2]], [[1,"b"], [1,2]])
Traceback (most recent call last):
...
TypeError: m_a should contain only integers or floats


# Check second arg contains only integers
>>> matrix_mul([[1, 2], [3, 2]], [["b", 2], [1,2]])
Traceback (most recent call last):
...
TypeError: m_b should contain only integers or floats


# Check first arg is a rectangle
>>> matrix_mul([[1, 2], [3]], [[1,3], [1,2]])
Traceback (most recent call last):
...
TypeError: each row of m_a must be of the same size


# Check second arg is a rectangle
>>> matrix_mul([[1, 2], [3, 2]], [[3], [1,2]])
Traceback (most recent call last):
...
TypeError: each row of m_b must be of the same size


# Check matrices cannot be multiplied
>>> matrix_mul([[1], [2]], [[3, 2], [1, 2]])
Traceback (most recent call last):
...
ValueError: m_a and m_b can't be multiplied


# Check matrices cannot be multiplied
>>> matrix_mul([[1, 2], [2, 2]], [[2]])
Traceback (most recent call last):
...
ValueError: m_a and m_b can't be multiplied


>>> matrix_mul() # doctest: +IGNORE_EXCEPTION_DETAIL
Traceback (most recent call last):
    ...
TypeError

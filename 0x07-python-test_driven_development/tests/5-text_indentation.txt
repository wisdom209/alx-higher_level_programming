This text file tests if a function prints a text with 2 new lines after each of these characters: ., ? and :

>>> text_indentation = __import__('5-text_indentation').text_indentation

#check module docstring
>>> m = __import__('5-text_indentation').__doc__
>>> len(m) > 1
True

#check function docstring
>>> len(text_indentation.__doc__) > 1
True

# Correct Output
>>> text_indentation("""Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quonam modo? Utrum igitur tibi litteram videor an totas paginas commovere? Non autem hoc: igitur ne illud quidem. Fortasse id optimum, sed ubi illud:  Plus semper voluptatis? Teneo, inquit finem illi videri nihil dolere. Transfer idem ad modestiam vel temperantiam, quae est moderatio cupiditatum  rationi oboediens. Si id dicis, vicimus. Inde sermone vario sex illa a Dipylo stadia confecimus. Sin aliud quid voles, postea. Quae animi affectio suum  cuique tribuens atque hanc, quam dico. Utinam quidem dicerent alium alio beatiorem! Iam ruinas videres""")
Lorem ipsum dolor sit amet, consectetur adipiscing elit.
<BLANKLINE>
Quonam modo?
<BLANKLINE>
Utrum igitur tibi litteram videor an totas paginas commovere?
<BLANKLINE>
Non autem hoc:
<BLANKLINE>
igitur ne illud quidem.
<BLANKLINE>
Fortasse id optimum, sed ubi illud:
<BLANKLINE>
Plus semper voluptatis?
<BLANKLINE>
Teneo, inquit finem illi videri nihil dolere.
<BLANKLINE>
Transfer idem ad modestiam vel temperantiam, quae est moderatio cupiditatum  rationi oboediens.
<BLANKLINE>
Si id dicis, vicimus.
<BLANKLINE>
Inde sermone vario sex illa a Dipylo stadia confecimus.
<BLANKLINE>
Sin aliud quid voles, postea.
<BLANKLINE>
Quae animi affectio suum  cuique tribuens atque hanc, quam dico.
<BLANKLINE>
Utinam quidem dicerent alium alio beatiorem! Iam ruinas videres

# text must be a string
>>> text_indentation(5)
Traceback (most recent call last):
...
TypeError: text must be a string

# No args
>>> text_indentation()
Traceback (most recent call last):
...
TypeError: text_indentation() missing 1 required positional argument: 'text'

# Undefined args
>>> text_indentation(a)
Traceback (most recent call last):
...
NameError: name 'a' is not defined

>>> text_indentation("a", "b") # doctest: +IGNORE_EXCEPTION_DETAIL
Traceback (most recent call last):
    ...
TypeError


# correct output
>>> text = "This is a simple string with no special characters"
>>> text_indentation(text)
This is a simple string with no special characters


# A string with a period, question mark, and colon:
>>> text = "This is a string with all three special characters. Is it working? Let's find out: it is!"
>>> text_indentation(text)
This is a string with all three special characters.
<BLANKLINE>
Is it working?
<BLANKLINE>
Let's find out:
<BLANKLINE>
it is!


# A string with multiple periods
>>> text = "..."
>>> text_indentation(text)
.
<BLANKLINE>
.
<BLANKLINE>
.
<BLANKLINE>


#A string with no spaces after the special characters:
>>> text = "This is a string with no spaces after the special characters.Is it working?Let's find out:it is!"
>>> text_indentation(text)
This is a string with no spaces after the special characters.
<BLANKLINE>
Is it working?
<BLANKLINE>
Let's find out:
<BLANKLINE>
it is!


# an empty string
>>> text = ""
>>> text_indentation(text)


# Only special characters
>>> text = "?.:"
>>> text_indentation(text)
?
<BLANKLINE>
.
<BLANKLINE>
:
<BLANKLINE>


# String with multiple spaces between words
>>> text = "This   is a  string with  multiple spaces between  words.  Is it working?  Let's  find out:  it is!"
>>> text_indentation(text)
This   is a  string with  multiple spaces between  words.
<BLANKLINE>
Is it working?
<BLANKLINE>
Let's  find out:
<BLANKLINE>
it is!


